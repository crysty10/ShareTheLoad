#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShareTheLoad")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAddress(Address instance);
  partial void UpdateAddress(Address instance);
  partial void DeleteAddress(Address instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertRequest(Request instance);
  partial void UpdateRequest(Request instance);
  partial void DeleteRequest(Request instance);
  partial void InsertSuscription(Suscription instance);
  partial void UpdateSuscription(Suscription instance);
  partial void DeleteSuscription(Suscription instance);
  partial void InsertUserAccount(UserAccount instance);
  partial void UpdateUserAccount(UserAccount instance);
  partial void DeleteUserAccount(UserAccount instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ShareTheLoadConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Address> Addresses
	{
		get
		{
			return this.GetTable<Address>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<Request> Requests
	{
		get
		{
			return this.GetTable<Request>();
		}
	}
	
	public System.Data.Linq.Table<Suscription> Suscriptions
	{
		get
		{
			return this.GetTable<Suscription>();
		}
	}
	
	public System.Data.Linq.Table<UserAccount> UserAccounts
	{
		get
		{
			return this.GetTable<UserAccount>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Country;
	
	private string _State;
	
	private string _City;
	
	private string _Sector;
	
	private string _Street;
	
	private string _StreetNo;
	
	private string _Building;
	
	private string _Staircase;
	
	private string _Floor;
	
	private string _Apartment;
	
	private EntitySet<UserAccount> _UserAccounts;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnSectorChanging(string value);
    partial void OnSectorChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStreetNoChanging(string value);
    partial void OnStreetNoChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnStaircaseChanging(string value);
    partial void OnStaircaseChanged();
    partial void OnFloorChanging(string value);
    partial void OnFloorChanged();
    partial void OnApartmentChanging(string value);
    partial void OnApartmentChanged();
    #endregion
	
	public Address()
	{
		this._UserAccounts = new EntitySet<UserAccount>(new Action<UserAccount>(this.attach_UserAccounts), new Action<UserAccount>(this.detach_UserAccounts));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Country
	{
		get
		{
			return this._Country;
		}
		set
		{
			if ((this._Country != value))
			{
				this.OnCountryChanging(value);
				this.SendPropertyChanging();
				this._Country = value;
				this.SendPropertyChanged("Country");
				this.OnCountryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sector", DbType="NVarChar(MAX)")]
	public string Sector
	{
		get
		{
			return this._Sector;
		}
		set
		{
			if ((this._Sector != value))
			{
				this.OnSectorChanging(value);
				this.SendPropertyChanging();
				this._Sector = value;
				this.SendPropertyChanged("Sector");
				this.OnSectorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Street
	{
		get
		{
			return this._Street;
		}
		set
		{
			if ((this._Street != value))
			{
				this.OnStreetChanging(value);
				this.SendPropertyChanging();
				this._Street = value;
				this.SendPropertyChanged("Street");
				this.OnStreetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetNo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string StreetNo
	{
		get
		{
			return this._StreetNo;
		}
		set
		{
			if ((this._StreetNo != value))
			{
				this.OnStreetNoChanging(value);
				this.SendPropertyChanging();
				this._StreetNo = value;
				this.SendPropertyChanged("StreetNo");
				this.OnStreetNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Building
	{
		get
		{
			return this._Building;
		}
		set
		{
			if ((this._Building != value))
			{
				this.OnBuildingChanging(value);
				this.SendPropertyChanging();
				this._Building = value;
				this.SendPropertyChanged("Building");
				this.OnBuildingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staircase", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Staircase
	{
		get
		{
			return this._Staircase;
		}
		set
		{
			if ((this._Staircase != value))
			{
				this.OnStaircaseChanging(value);
				this.SendPropertyChanging();
				this._Staircase = value;
				this.SendPropertyChanged("Staircase");
				this.OnStaircaseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Floor
	{
		get
		{
			return this._Floor;
		}
		set
		{
			if ((this._Floor != value))
			{
				this.OnFloorChanging(value);
				this.SendPropertyChanging();
				this._Floor = value;
				this.SendPropertyChanged("Floor");
				this.OnFloorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apartment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Apartment
	{
		get
		{
			return this._Apartment;
		}
		set
		{
			if ((this._Apartment != value))
			{
				this.OnApartmentChanging(value);
				this.SendPropertyChanging();
				this._Apartment = value;
				this.SendPropertyChanged("Apartment");
				this.OnApartmentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_UserAccount", Storage="_UserAccounts", ThisKey="ID", OtherKey="AddressID")]
	public EntitySet<UserAccount> UserAccounts
	{
		get
		{
			return this._UserAccounts;
		}
		set
		{
			this._UserAccounts.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserAccounts(UserAccount entity)
	{
		this.SendPropertyChanging();
		entity.Address = this;
	}
	
	private void detach_UserAccounts(UserAccount entity)
	{
		this.SendPropertyChanging();
		entity.Address = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Category;
	
	private string _Description;
	
	private string _Price;
	
	private EntitySet<Request> _Requests;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(string value);
    partial void OnPriceChanged();
    #endregion
	
	public Product()
	{
		this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Category
	{
		get
		{
			return this._Category;
		}
		set
		{
			if ((this._Category != value))
			{
				this.OnCategoryChanging(value);
				this.SendPropertyChanging();
				this._Category = value;
				this.SendPropertyChanged("Category");
				this.OnCategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Request", Storage="_Requests", ThisKey="ID", OtherKey="ProductID")]
	public EntitySet<Request> Requests
	{
		get
		{
			return this._Requests;
		}
		set
		{
			this._Requests.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Requests(Request entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_Requests(Request entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
    
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _UserID;
	
	private int _ProductID;
	
	private string _Title;
	
	private System.DateTime _StartDate;
	
	private System.DateTime _EndDate;
	
	private int _MinUsers;
	
	private int _MaxUsers;
	
	private string _State;
	
	private string _City;
	
	private string _Sector;
	
	private string _Street;
	
	private string _Status;
	
	private EntitySet<Suscription> _Suscriptions;
	
	private EntityRef<Product> _Product;
	
	private EntityRef<UserAccount> _UserAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMinUsersChanging(int value);
    partial void OnMinUsersChanged();
    partial void OnMaxUsersChanging(int value);
    partial void OnMaxUsersChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnSectorChanging(string value);
    partial void OnSectorChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public Request()
	{
		this._Suscriptions = new EntitySet<Suscription>(new Action<Suscription>(this.attach_Suscriptions), new Action<Suscription>(this.detach_Suscriptions));
		this._Product = default(EntityRef<Product>);
		this._UserAccount = default(EntityRef<UserAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._UserAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
	public System.DateTime EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinUsers", DbType="Int NOT NULL")]
	public int MinUsers
	{
		get
		{
			return this._MinUsers;
		}
		set
		{
			if ((this._MinUsers != value))
			{
				this.OnMinUsersChanging(value);
				this.SendPropertyChanging();
				this._MinUsers = value;
				this.SendPropertyChanged("MinUsers");
				this.OnMinUsersChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxUsers", DbType="Int NOT NULL")]
	public int MaxUsers
	{
		get
		{
			return this._MaxUsers;
		}
		set
		{
			if ((this._MaxUsers != value))
			{
				this.OnMaxUsersChanging(value);
				this.SendPropertyChanging();
				this._MaxUsers = value;
				this.SendPropertyChanged("MaxUsers");
				this.OnMaxUsersChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sector", DbType="NVarChar(MAX)")]
	public string Sector
	{
		get
		{
			return this._Sector;
		}
		set
		{
			if ((this._Sector != value))
			{
				this.OnSectorChanging(value);
				this.SendPropertyChanging();
				this._Sector = value;
				this.SendPropertyChanged("Sector");
				this.OnSectorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Street
	{
		get
		{
			return this._Street;
		}
		set
		{
			if ((this._Street != value))
			{
				this.OnStreetChanging(value);
				this.SendPropertyChanging();
				this._Street = value;
				this.SendPropertyChanged("Street");
				this.OnStreetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Suscription", Storage="_Suscriptions", ThisKey="ID", OtherKey="RequestID")]
	public EntitySet<Suscription> Suscriptions
	{
		get
		{
			return this._Suscriptions;
		}
		set
		{
			this._Suscriptions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Request", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.Requests.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.Requests.Add(this);
					this._ProductID = value.ID;
				}
				else
				{
					this._ProductID = default(int);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Request", Storage="_UserAccount", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public UserAccount UserAccount
	{
		get
		{
			return this._UserAccount.Entity;
		}
		set
		{
			UserAccount previousValue = this._UserAccount.Entity;
			if (((previousValue != value) 
						|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserAccount.Entity = null;
					previousValue.Requests.Remove(this);
				}
				this._UserAccount.Entity = value;
				if ((value != null))
				{
					value.Requests.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("UserAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Suscriptions(Suscription entity)
	{
		this.SendPropertyChanging();
		entity.Request = this;
	}
	
	private void detach_Suscriptions(Suscription entity)
	{
		this.SendPropertyChanging();
		entity.Request = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suscription")]
public partial class Suscription : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _RequestID;
	
	private int _UserID;
	
	private EntityRef<Request> _Request;
	
	private EntityRef<UserAccount> _UserAccount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
	
	public Suscription()
	{
		this._Request = default(EntityRef<Request>);
		this._UserAccount = default(EntityRef<UserAccount>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="Int NOT NULL")]
	public int RequestID
	{
		get
		{
			return this._RequestID;
		}
		set
		{
			if ((this._RequestID != value))
			{
				if (this._Request.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRequestIDChanging(value);
				this.SendPropertyChanging();
				this._RequestID = value;
				this.SendPropertyChanged("RequestID");
				this.OnRequestIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._UserAccount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Suscription", Storage="_Request", ThisKey="RequestID", OtherKey="ID", IsForeignKey=true)]
	public Request Request
	{
		get
		{
			return this._Request.Entity;
		}
		set
		{
			Request previousValue = this._Request.Entity;
			if (((previousValue != value) 
						|| (this._Request.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Request.Entity = null;
					previousValue.Suscriptions.Remove(this);
				}
				this._Request.Entity = value;
				if ((value != null))
				{
					value.Suscriptions.Add(this);
					this._RequestID = value.ID;
				}
				else
				{
					this._RequestID = default(int);
				}
				this.SendPropertyChanged("Request");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Suscription", Storage="_UserAccount", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public UserAccount UserAccount
	{
		get
		{
			return this._UserAccount.Entity;
		}
		set
		{
			UserAccount previousValue = this._UserAccount.Entity;
			if (((previousValue != value) 
						|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserAccount.Entity = null;
					previousValue.Suscriptions.Remove(this);
				}
				this._UserAccount.Entity = value;
				if ((value != null))
				{
					value.Suscriptions.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("UserAccount");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccount")]
public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Email;
	
	private string _Password;
	
	private string _Phone;
	
	private int _AddressID;
	
	private EntitySet<Request> _Requests;
	
	private EntitySet<Suscription> _Suscriptions;
	
	private EntityRef<Address> _Address;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    #endregion
	
	public UserAccount()
	{
		this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
		this._Suscriptions = new EntitySet<Suscription>(new Action<Suscription>(this.attach_Suscriptions), new Action<Suscription>(this.detach_Suscriptions));
		this._Address = default(EntityRef<Address>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
	public int AddressID
	{
		get
		{
			return this._AddressID;
		}
		set
		{
			if ((this._AddressID != value))
			{
				if (this._Address.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAddressIDChanging(value);
				this.SendPropertyChanging();
				this._AddressID = value;
				this.SendPropertyChanged("AddressID");
				this.OnAddressIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Request", Storage="_Requests", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<Request> Requests
	{
		get
		{
			return this._Requests;
		}
		set
		{
			this._Requests.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Suscription", Storage="_Suscriptions", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<Suscription> Suscriptions
	{
		get
		{
			return this._Suscriptions;
		}
		set
		{
			this._Suscriptions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_UserAccount", Storage="_Address", ThisKey="AddressID", OtherKey="ID", IsForeignKey=true)]
	public Address Address
	{
		get
		{
			return this._Address.Entity;
		}
		set
		{
			Address previousValue = this._Address.Entity;
			if (((previousValue != value) 
						|| (this._Address.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Address.Entity = null;
					previousValue.UserAccounts.Remove(this);
				}
				this._Address.Entity = value;
				if ((value != null))
				{
					value.UserAccounts.Add(this);
					this._AddressID = value.ID;
				}
				else
				{
					this._AddressID = default(int);
				}
				this.SendPropertyChanged("Address");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Requests(Request entity)
	{
		this.SendPropertyChanging();
		entity.UserAccount = this;
	}
	
	private void detach_Requests(Request entity)
	{
		this.SendPropertyChanging();
		entity.UserAccount = null;
	}
	
	private void attach_Suscriptions(Suscription entity)
	{
		this.SendPropertyChanging();
		entity.UserAccount = this;
	}
	
	private void detach_Suscriptions(Suscription entity)
	{
		this.SendPropertyChanging();
		entity.UserAccount = null;
	}
}
#pragma warning restore 1591
